;; Performance
(setq gc-cons-threshold 20000000)
(setq jit-lock-stealth-time 16
      jit-lock-defer-contextually t
      jit-lock-stealth-nice 0.5)
(setq-default font-lock-multiline t)

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Show active region
(transient-mark-mode 1)

;; auto pair
;; (electric-pair-mode t)

;; Lines should be 80 characters wide, not 72
(setq fill-column 80)

;; Show me empty lines after buffer end
(set-default 'indicate-empty-lines t)
(setq-default indicate-buffer-boundaries 'right)

;; Easily navigate sillycased words
(global-subword-mode 1)

;; No lock files
(setq create-lockfiles nil)

(setq next-screen-context-lines 5)

(use-package smart-newline
  :config
  (add-hook 'clojure-mode-hook 'smart-newline-mode)
  (add-hook 'org-mode-hook 'smart-newline-mode)
  (defun my/smart-newline (of &rest arglist)
    (apply (cond (current-prefix-arg #'newline)
                 (t of))
           arglist))
  (advice-add 'smart-newline :around #'my/smart-newline))

(defun display-prefix (arg)
  "Display the value of the raw prefix arg."
  (interactive "P")
  (message "%s" arg))

(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)

;; anzu
(use-package anzu
  :config (global-anzu-mode 1))

;; recentf
(use-package recentf
  :config
  (progn
    (recentf-mode 1)
    (setq recentf-max-menu-items 50)))

(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map (kbd "F") 'my-dired-find-marked-files)
     (defun my-dired-find-marked-files (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))

(use-package ace-isearch
  :config
  (global-ace-isearch-mode 1))

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; (use-package helm-wordnet
;;   :config (setq helm-wordnet-wordnet-location "/usr/share/wordnet"))

(use-package helm-swoop
  :config
  (progn
    (setq helm-swoop-split-with-multiple-windows t)))

;; editor config
(setq edconf-exec-path "/usr/bin/editorconfig")

(setq visible-bell t
      font-lock-maximum-decoration t
      truncate-partial-width-windows nil
      ;; disable to buckup funciton
      backup-inhibited t
      delete-auto-save-files t
      ;; completion ignore case (lower/upper)
      completion-ignore-case t
      read-file-name-completion-ignore-case t
      inhibit-startup-message t)

(savehist-mode 1)
(column-number-mode 1)

(add-hook 'before-save-hook 'whitespace-cleanup)

(use-package paren
  :init (progn (setq show-paren-style 'parenthesis)
               (show-paren-mode 1)))

(use-package rainbow-mode
  :init (progn (add-hook 'css-mode-hook 'rainbow-mode)
               (add-hook 'clojure-mode-hook 'rainbow-mode)
               (add-hook 'js2-mode-hook 'rainbow-mode)
               (add-hook 'web-mode-hook 'rainbow-mode)
               (add-hook 'emacs-lisp-mode 'rainbow-mode)))

(use-package eww
  :init
  (setq eww-search-prefix "https://www.google.co.jp/search?q="))

(use-package emojify
  :config
  (add-hook 'after-init-hook #'global-emojify-mode))

(use-package emoji-cheat-sheet-plus
  :defer t
  :init
  (progn
    ;; enabled emoji in buffer
    (add-hook 'org-mode-hook 'emoji-cheat-sheet-plus-display-mode)
    ;; (add-hook 'text-mode-hook 'emoji-cheat-sheet-plus-display-mode)
    ;; insert emoji with helm
    (bind-keys :map global-map
               ("C-c C-e" . emoji-cheat-sheet-plus-insert))))

(use-package image
  :defer t
  :config
  (add-hook 'image-mode-hook
            (lambda ()
              (use-package image+
                :config
                (use-package smartrep
                  :config
                  (smartrep-define-key
                      image-mode-map "C-x" '(("-" . 'imagex-sticky-zoom-out)
                                             ("+" . 'imagex-sticky-zoom-in))))))))


(when window-system
  (load-theme 'zenburn t)
  ;; (load-theme 'hc-zenburn t)
  ;; (load-theme 'gruvbox t)
  ;; (load-theme 'ample t t)
  ;; (load-theme 'ample-flat t t)
  ;; (enable-theme 'ample-flat)

  (custom-set-faces
   '(e2wm:face-history-list-normal ((t (:foreground "LightGoldenrod1")))))

  ;; Font settings
  ;;  Font width checker:
  ;;    The both edges of two lines below should be aligned.
  ;;    |„ÅÇ„ÅÑ„ÅÜ„Åà„Åä„Åã„Åç„Åè„Åë„Åì„Åï„Åó„Åô„Åõ„Åùüç∫|
  ;;    |''''''''''''''''''''''''''''''''|
  ;;
  (let* ((size 8)
         (asciifont "Dejavu Sans Mono")
         (jpfont "TakaoGothic")
         (emojifont "Dejavu Sans Mono")
         (fontspec (font-spec :family asciifont))
         (jp-fontspec (font-spec :family jpfont))
         (emoji-fontspec (font-spec :family emojifont)))
    (set-face-attribute 'default nil :family asciifont :height (* size 10) :weight 'light)
    (setq face-font-rescale-alist nil)
    (add-to-list 'face-font-rescale-alist `(,jpfont . 1.2))
    (add-to-list 'face-font-rescale-alist `(,emojifont . 0.95))
    (set-fontset-font nil 'symbol emoji-fontspec nil)
    (set-fontset-font nil 'japanese-jisx0213.2004-1 jp-fontspec)
    (set-fontset-font nil 'japanese-jisx0213-2 jp-fontspec)
    (set-fontset-font nil 'katakana-jisx0201 jp-fontspec) ; ÂçäËßí„Ç´„Éä
    (set-fontset-font nil '(#x0080 . #x024F) fontspec) ; ÂàÜÈü≥Á¨¶‰ªò„Åç„É©„ÉÜ„É≥
    (set-fontset-font nil '(#x0370 . #x03FF) fontspec) ; „ÇÆ„É™„Ç∑„É£ÊñáÂ≠ó
    )

  ;; (setq default-frame-alist '((font . "Dejavu Sans Mono-7.5")))
  ;; (set-default-font "Dejavu Sans Mono-7.5")
  ;; (set-face-font 'variable-pitch "Dejavu Sans Mono-7.5")
  ;; (set-fontset-font (frame-parameter nil 'font)
  ;;                   'japanese-jisx0208
  ;;                   '("Takao„Ç¥„Ç∑„ÉÉ„ÇØ" . "unicode-bmp"))

  (use-package server
    :config (unless (server-running-p)
              (server-start))))

(use-package hl-line
  :init
  (progn
    (global-hl-line-mode -1)
    (set-face-background 'hl-line "#525252")))

(use-package skk
  :config
  (setq default-input-method "japanese-skk")
  (setq skk-kuten-touten-alist
        (cons '(my-en "." . ",")
              skk-kuten-touten-alist))
  (setq-default skk-kutouten-type 'jp)

  :init
  (use-package skk-decor)
  (setq skk-kakutei-when-unique-candidate nil)
  (setq skk-egg-like-newline t)
  (setq skk-isearch-mode-enable nil)
  (setq skk-show-inline 'vertical)
  (setq skk-cdb-large-jisyo "/usr/share/skk/SKK-JISYO.LL.cdb")
  (setq skk-sticky-key ":")
  (setq skk-auto-insert-paren nil)
  (add-to-list 'context-skk-programming-mode 'clojure-mode)

  (add-hook 'skk-load-hook
            (lambda ()
              (require 'context-skk)))

  (add-hook 'find-file-hook
            (lambda ()
              (skk-latin-mode t)))

  ;; conflict skk && paredit
  (defun paredit-newline\\skk-kakutei (origfun &rest arglist)
    (apply (cond ((not skk-mode) origfun)
                 (t #'skk-kakutei))
           arglist))

  (advice-add 'paredit-newline :around #'paredit-newline\\skk-kakutei)

  (defun paredit-newline\\skk-insert (origfun &rest arglist)
    (apply (cond (skk-j-mode #'skk-insert)
                 (t origfun))
           arglist))

  (advice-add 'cljr-slash :around #'paredit-newline\\skk-insert)

  ;; (setq skk-rom-kana-base-rule-list
  ;;       '(("a" nil ("„Ç¢" . "„ÅÇ"))
  ;;         ("nn" "n" ("„ÉÉ" . "„Å£"))
  ;;         ("na" nil ("„Éê" . "„Å∞"))
  ;;         ("nd" nil ("„Éô" . "„Åπ"))
  ;;         ("ng" nil ("„Éì" . "„Å≥"))
  ;;         ("ns" nil ("„Éú" . "„Åº"))
  ;;         ("nf" nil ("„Éñ" . "„Å∂"))
  ;;         ("nta" nil ("„Éì„É£" . "„Å≥„ÇÉ"))
  ;;         ("ntd" nil ("„Éì„Çß" . "„Å≥„Åá"))
  ;;         ("ntg" nil ("„Éì„Ç£" . "„Å≥„ÅÉ"))
  ;;         ("nts" nil ("„Éì„Éß" . "„Å≥„Çá"))
  ;;         ("ntf" nil ("„Éì„É•" . "„Å≥„ÇÖ"))
  ;;         ("ii" "i" ("„ÉÉ" . "„Å£"))
  ;;         ("ija" nil ("„ÉÅ„É£" . "„Å°„ÇÉ"))
  ;;         ("ijd" nil ("„ÉÅ„Çß" . "„Å°„Åá"))
  ;;         ("ijg" nil ("„ÉÅ" . "„Å°"))
  ;;         ("ijs" nil ("„ÉÅ„Éß" . "„Å°„Çá"))
  ;;         ("ijf" nil ("„ÉÅ„É•" . "„Å°„ÇÖ"))
  ;;         ("ita" nil ("„ÉÅ„É£" . "„Å°„ÇÉ"))
  ;;         ("itd" nil ("„ÉÅ„Çß" . "„Å°„Åá"))
  ;;         ("itg" nil ("„ÉÅ„Ç£" . "„Å°„ÅÉ"))
  ;;         ("its" nil ("„ÉÅ„Éß" . "„Å°„Çá"))
  ;;         ("itf" nil ("„ÉÅ„É•" . "„Å°„ÇÖ"))
  ;;         ("hh" "h" ("„ÉÉ" . "„Å£"))
  ;;         ("ha" nil ("„ÉÄ" . "„Å†"))
  ;;         ("hd" nil ("„Éá" . "„Åß"))
  ;;         ("hja" nil ("„Éá„É£" . "„Åß„ÇÉ"))
  ;;         ("hjd" nil ("„Éá„Çß" . "„Åß„Åá"))
  ;;         ("hjg" nil ("„Éá„Ç£" . "„Åß„ÅÉ"))
  ;;         ("hjs" nil ("„Éá„Éß" . "„Åß„Çá"))
  ;;         ("hjf" nil ("„Éá„É•" . "„Åß„ÇÖ"))
  ;;         ("hg" nil ("„ÉÇ" . "„Å¢"))
  ;;         ("hs" nil ("„Éâ" . "„Å©"))
  ;;         ("hf" nil ("„ÉÖ" . "„Å•"))
  ;;         ("hta" nil ("„ÉÇ„É£" . "„Å¢„ÇÉ"))
  ;;         ("htd" nil ("„ÉÇ„Çß" . "„Å¢„Åá"))
  ;;         ("htg" nil ("„ÉÇ„Ç£" . "„Å¢„ÅÉ"))
  ;;         ("hts" nil ("„ÉÇ„Éß" . "„Å¢„Çá"))
  ;;         ("htf" nil ("„ÉÇ„É•" . "„Å¢„ÇÖ"))
  ;;         ("d" nil ("„Ç®" . "„Åà"))
  ;;         ("yy" "y" ("„ÉÉ" . "„Å£"))
  ;;         ("ya" nil ("„Éï„Ç°" . "„Åµ„ÅÅ"))
  ;;         ("yd" nil ("„Éï„Çß" . "„Åµ„Åá"))
  ;;         ("yg" nil ("„Éï„Ç£" . "„Åµ„ÅÉ"))
  ;;         ("ys" nil ("„Éï„Ç©" . "„Åµ„Åâ"))
  ;;         ("yf" nil ("„Éï" . "„Åµ"))
  ;;         ("yta" nil ("„Éï„É£" . "„Åµ„ÇÉ"))
  ;;         ("ytd" nil ("„Éï„Çß" . "„Åµ„Åá"))
  ;;         ("ytg" nil ("„Éï„Ç£" . "„Åµ„ÅÉ"))
  ;;         ("yts" nil ("„Éï„Éß" . "„Åµ„Çá"))
  ;;         ("ytf" nil ("„Éï„É•" . "„Åµ„ÇÖ"))
  ;;         ("uu" "u" ("„ÉÉ" . "„Å£"))
  ;;         ("ua" nil ("„Ç¨" . "„Åå"))
  ;;         ("ud" nil ("„Ç≤" . "„Åí"))
  ;;         ("ug" nil ("„ÇÆ" . "„Åé"))
  ;;         ("us" nil ("„Ç¥" . "„Åî"))
  ;;         ("uf" nil ("„Ç∞" . "„Åê"))
  ;;         ("uta" nil ("„ÇÆ„É£" . "„Åé„ÇÉ"))
  ;;         ("utd" nil ("„ÇÆ„Çß" . "„Åé„Åá"))
  ;;         ("utg" nil ("„ÇÆ„Ç£" . "„Åé„ÅÉ"))
  ;;         ("uts" nil ("„ÇÆ„Éß" . "„Åé„Çá"))
  ;;         ("utf" nil ("„ÇÆ„É•" . "„Åé„ÇÖ"))
  ;;         ("ja" nil ("„Éè" . "„ÅØ"))
  ;;         ("jd" nil ("„Éò" . "„Å∏"))
  ;;         ("jg" nil ("„Éí" . "„Å≤"))
  ;;         ("js" nil ("„Éõ" . "„Åª"))
  ;;         ("jf" nil ("„Éï" . "„Åµ"))
  ;;         ("jta" nil ("„Éí„É£" . "„Å≤„ÇÉ"))
  ;;         ("jtd" nil ("„Éí„Çß" . "„Å≤„Åá"))
  ;;         ("jtg" nil ("„Éí„Ç£" . "„Å≤„ÅÉ"))
  ;;         ("jts" nil ("„Éí„Éß" . "„Å≤„Çá"))
  ;;         ("jtf" nil ("„Éí„É•" . "„Å≤„ÇÖ"))
  ;;         ("g" nil ("„Ç§" . "„ÅÑ"))
  ;;         ("cc" "c" ("„ÉÉ" . "„Å£"))
  ;;         ("ca" nil ("„Ç∏„É£" . "„Åò„ÇÉ"))
  ;;         ("cd" nil ("„Ç∏„Çß" . "„Åò„Åá"))
  ;;         ("cg" nil ("„Ç∏" . "„Åò"))
  ;;         ("cs" nil ("„Ç∏„Éß" . "„Åò„Çá"))
  ;;         ("cf" nil ("„Ç∏„É•" . "„Åò„ÇÖ"))
  ;;         ("cta" nil ("„Ç∏„É£" . "„Åò„ÇÉ"))
  ;;         ("ctd" nil ("„Ç∏„Çß" . "„Åò„Åá"))
  ;;         ("ctg" nil ("„Ç∏„Ç£" . "„Åò„ÅÉ"))
  ;;         ("cts" nil ("„Ç∏„Éß" . "„Åò„Çá"))
  ;;         ("ctf" nil ("„Ç∏„É•" . "„Åò„ÇÖ"))
  ;;         ("vv" "v" ("„ÉÉ" . "„Å£"))
  ;;         ("va" nil ("„Ç´" . "„Åã"))
  ;;         ("vd" nil ("„Ç±" . "„Åë"))
  ;;         ("vg" nil ("„Ç≠" . "„Åç"))
  ;;         ("vs" nil ("„Ç≥" . "„Åì"))
  ;;         ("vf" nil ("„ÇØ" . "„Åè"))
  ;;         ("ia" nil ("„Ç´" . "„Åã"))
  ;;         ("id" nil ("„Ç±" . "„Åë"))
  ;;         ("ig" nil ("„Ç≠" . "„Åç"))
  ;;         ("is" nil ("„Ç≥" . "„Åì"))
  ;;         ("if" nil ("„ÇØ" . "„Åè"))
  ;;         ("vta" nil ("„Ç≠„É£" . "„Åç„ÇÉ"))
  ;;         ("vtd" nil ("„Ç≠„Çß" . "„Åç„Åá"))
  ;;         ("vtg" nil ("„Ç≠„Ç£" . "„Åç„ÅÉ"))
  ;;         ("vts" nil ("„Ç≠„Éß" . "„Åç„Çá"))
  ;;         ("vtf" nil ("„Ç≠„É•" . "„Åç„ÇÖ"))
  ;;         ("ma" nil ("„Éû" . "„Åæ"))
  ;;         ("md" nil ("„É°" . "„ÇÅ"))
  ;;         ("mg" nil ("„Éü" . "„Åø"))
  ;;         ("ms" nil ("„É¢" . "„ÇÇ"))
  ;;         ("mf" nil ("„É†" . "„ÇÄ"))
  ;;         ("mta" nil ("„Éü„É£" . "„Åø„ÇÉ"))
  ;;         ("mtd" nil ("„Éü„Çß" . "„Åø„Åá"))
  ;;         ("mtg" nil ("„Éü„Ç£" . "„Åø„ÅÉ"))
  ;;         ("mts" nil ("„Éü„Éß" . "„Åø„Çá"))
  ;;         ("mtf" nil ("„Éü„É•" . "„Åø„ÇÖ"))
  ;;         ("l" nil ("„É≥" . "„Çì"))
  ;;         ("lq" nil ("„É≥" . "„Çì"))
  ;;         ("la" nil ("„Éä" . "„Å™"))
  ;;         ("ld" nil ("„Éç" . "„Å≠"))
  ;;         ("lg" nil ("„Éã" . "„Å´"))
  ;;         ("ll" nil ("„É≥" . "„Çì"))
  ;;         ("ls" nil ("„Éé" . "„ÅÆ"))
  ;;         ("lf" nil ("„Éå" . "„Å¨"))
  ;;         ("lta" nil ("„Éã„É£" . "„Å´„ÇÉ"))
  ;;         ("ltd" nil ("„Éã„Çß" . "„Å´„Åá"))
  ;;         ("ltg" nil ("„Éã„Ç£" . "„Å´„ÅÉ"))
  ;;         ("lts" nil ("„Éã„Éß" . "„Å´„Çá"))
  ;;         ("ltf" nil ("„Éã„É•" . "„Å´„ÇÖ"))
  ;;         ("s" nil ("„Ç™" . "„Åä"))
  ;;         ("rr" "r" ("„ÉÉ" . "„Å£"))
  ;;         ("ra" nil ("„Éë" . "„Å±"))
  ;;         ("rd" nil ("„Éö" . "„Å∫"))
  ;;         ("rg" nil ("„Éî" . "„Å¥"))
  ;;         ("rs" nil ("„Éù" . "„ÅΩ"))
  ;;         ("rf" nil ("„Éó" . "„Å∑"))
  ;;         ("rta" nil ("„Éî„É£" . "„Å¥„ÇÉ"))
  ;;         ("rtd" nil ("„Éî„Çß" . "„Å¥„Åá"))
  ;;         ("rtg" nil ("„Éî„Ç£" . "„Å¥„ÅÉ"))
  ;;         ("rts" nil ("„Éî„Éß" . "„Å¥„Çá"))
  ;;         ("rtf" nil ("„Éî„É•" . "„Å¥„ÇÖ"))
  ;;         ("oo" "o" ("„ÉÉ" . "„Å£"))
  ;;         ("oa" nil ("„É©" . "„Çâ"))
  ;;         ("od" nil ("„É¨" . "„Çå"))
  ;;         ("og" nil ("„É™" . "„Çä"))
  ;;         ("os" nil ("„É≠" . "„Çç"))
  ;;         ("of" nil ("„É´" . "„Çã"))
  ;;         ("ota" nil ("„É™„É£" . "„Çä„ÇÉ"))
  ;;         ("otd" nil ("„É™„Çß" . "„Çä„Åá"))
  ;;         ("otg" nil ("„É™„Ç£" . "„Çä„ÅÉ"))
  ;;         ("ots" nil ("„É™„Éß" . "„Çä„Çá"))
  ;;         ("otf" nil ("„É™„É•" . "„Çä„ÇÖ"))
  ;;         ("::" ":" ("„ÉÉ" . "„Å£"))
  ;;         (":a" nil ("„Çµ" . "„Åï"))
  ;;         (":d" nil ("„Çª" . "„Åõ"))
  ;;         (":ja" nil ("„Ç∑„É£" . "„Åó„ÇÉ"))
  ;;         (":jd" nil ("„Ç∑„Çß" . "„Åó„Åá"))
  ;;         (":jg" nil ("„Ç∑" . "„Åó"))
  ;;         (":js" nil ("„Ç∑„Éß" . "„Åó„Çá"))
  ;;         (":jf" nil ("„Ç∑„É•" . "„Åó„ÇÖ"))
  ;;         (":g" nil ("„Ç∑" . "„Åó"))
  ;;         (":s" nil ("„ÇΩ" . "„Åù"))
  ;;         (":f" nil ("„Çπ" . "„Åô"))
  ;;         (":ta" nil ("„Ç∑„É£" . "„Åó„ÇÉ"))
  ;;         (":td" nil ("„Ç∑„Çß" . "„Åó„Åá"))
  ;;         (":tg" nil ("„Ç∑„Ç£" . "„Åó„ÅÉ"))
  ;;         (":ts" nil ("„Ç∑„Éß" . "„Åó„Çá"))
  ;;         (":tf" nil ("„Ç∑„É•" . "„Åó„ÇÖ"))
  ;;         ("kk" "k" ("„ÉÉ" . "„Å£"))
  ;;         ("ka" nil ("„Çø" . "„Åü"))
  ;;         ("kd" nil ("„ÉÜ" . "„Å¶"))
  ;;         ("kja" nil ("„ÉÜ„Ç°" . "„Å¶„ÅÅ"))
  ;;         ("kjd" nil ("„ÉÜ„Çß" . "„Å¶„Åá"))
  ;;         ("kjg" nil ("„ÉÜ„Ç£" . "„Å¶„ÅÉ"))
  ;;         ("kjs" nil ("„ÉÜ„Éß" . "„Å¶„Çá"))
  ;;         ("kjf" nil ("„ÉÜ„É•" . "„Å¶„ÇÖ"))
  ;;         ("kg" nil ("„ÉÅ" . "„Å°"))
  ;;         ("ks" nil ("„Éà" . "„Å®"))
  ;;         ("k:f" nil ("„ÉÑ" . "„Å§"))
  ;;         ("kf" nil ("„ÉÑ" . "„Å§"))
  ;;         ("kta" nil ("„ÉÅ„É£" . "„Å°„ÇÉ"))
  ;;         ("ktd" nil ("„ÉÅ„Çß" . "„Å°„Åá"))
  ;;         ("ktg" nil ("„ÉÅ„Ç£" . "„Å°„ÅÉ"))
  ;;         ("kts" nil ("„ÉÅ„Éß" . "„Å°„Çá"))
  ;;         ("ktf" nil ("„ÉÅ„É•" . "„Å°„ÇÖ"))
  ;;         ("f" nil ("„Ç¶" . "„ÅÜ"))
  ;;         (".." "." ("„ÉÉ" . "„Å£"))
  ;;         (".a" nil ("„É¥„Ç°" . "„ÅÜ„Çõ„ÅÅ"))
  ;;         (".d" nil ("„É¥„Çß" . "„ÅÜ„Çõ„Åá"))
  ;;         (".g" nil ("„É¥„Ç£" . "„ÅÜ„Çõ„ÅÉ"))
  ;;         (".s" nil ("„É¥„Ç©" . "„ÅÜ„Çõ„Åâ"))
  ;;         (".f" nil ("„É¥" . "„ÅÜ„Çõ"))
  ;;         (",," "," ("„ÉÉ" . "„Å£"))
  ;;         (",a" nil ("„ÉØ" . "„Çè"))
  ;;         (",d" nil ("„Ç¶„Çß" . "„ÅÜ„Åá"))
  ;;         (",g" nil ("„Ç¶„Ç£" . "„ÅÜ„ÅÉ"))
  ;;         (",s" nil ("„É≤" . "„Çí"))
  ;;         (",f" nil ("„Ç¶" . "„ÅÜ"))
  ;;         ("bb" "b" ("„ÉÉ" . "„Å£"))
  ;;         ("ba" nil ("„Ç°" . "„ÅÅ"))
  ;;         ("bd" nil ("„Çß" . "„Åá"))
  ;;         ("bg" nil ("„Ç£" . "„ÅÉ"))
  ;;         ("bva" nil ("„Éµ" . "„Åã"))
  ;;         ("bvd" nil ("„É∂" . "„Åë"))
  ;;         ("bs" nil ("„Ç©" . "„Åâ"))
  ;;         ("bk:f" nil ("„ÉÉ" . "„Å£"))
  ;;         ("bkf" nil ("„ÉÉ" . "„Å£"))
  ;;         ("bf" nil ("„Ç•" . "„ÅÖ"))
  ;;         ("b,a" nil ("„ÉÆ" . "„Çé"))
  ;;         ("b,d" nil ("„É±" . "„Çë"))
  ;;         ("b,g" nil ("„É∞" . "„Çê"))
  ;;         ("bta" nil ("„É£" . "„ÇÉ"))
  ;;         ("bts" nil ("„Éß" . "„Çá"))
  ;;         ("btf" nil ("„É•" . "„ÇÖ"))
  ;;         ("tt" "t" ("„ÉÉ" . "„Å£"))
  ;;         ("ta" nil ("„É§" . "„ÇÑ"))
  ;;         ("td" nil ("„Ç§„Çß" . "„ÅÑ„Åá"))
  ;;         ("ts" nil ("„É®" . "„Çà"))
  ;;         ("tf" nil ("„É¶" . "„ÇÜ"))
  ;;         ("//" "/" ("„ÉÉ" . "„Å£"))
  ;;         ("/a" nil ("„Ç∂" . "„Åñ"))
  ;;         ("/d" nil ("„Çº" . "„Åú"))
  ;;         ("/g" nil ("„Ç∏" . "„Åò"))
  ;;         ("/s" nil ("„Çæ" . "„Åû"))
  ;;         ("/f" nil ("„Ç∫" . "„Åö"))
  ;;         ("/ta" nil ("„Ç∏„É£" . "„Åò„ÇÉ"))
  ;;         ("/td" nil ("„Ç∏„Çß" . "„Åò„Åá"))
  ;;         ("/tg" nil ("„Ç∏„Ç£" . "„Åò„ÅÉ"))
  ;;         ("/ts" nil ("„Ç∏„Éß" . "„Åò„Çá"))
  ;;         ("/tf" nil ("„Ç∏„É•" . "„Åò„ÇÖ"))

  ;;         ("z " nil "„ÄÄ")
  ;;         ("z*" nil "‚Äª")
  ;;         ("z," nil "‚Ä•")
  ;;         ("z-" nil "„Äú")
  ;;         ("z." nil "‚Ä¶")
  ;;         ("z/" nil "„Éª")
  ;;         ("z0" nil "‚óã")
  ;;         ("z:" nil "„Çú")
  ;;         ("z;" nil "„Çõ")
  ;;         ("z@" nil "‚óé")
  ;;         ("z[" nil "„Äé")
  ;;         ("z]" nil "„Äè")
  ;;         ("z{" nil "„Äê")
  ;;         ("z}" nil "„Äë")
  ;;         ("z(" nil "Ôºà")
  ;;         ("z)" nil "Ôºâ")
  ;;         ("zh" nil "‚Üê")
  ;;         ("zj" nil "‚Üì")
  ;;         ("zk" nil "‚Üë")
  ;;         ("zl" nil "‚Üí")
  ;;         ("zL" nil "‚áí")
  ;;         (":" nil "Ôºö")
  ;;         (";" nil "Ôºõ")
  ;;         ("?" nil "Ôºü")
  ;;         ("[" nil "„Äå")
  ;;         ("]" nil "„Äç")
  ;;         ("." nil skk-auto-kutouten)
  ;;         ("," nil skk-auto-kutouten)
  ;;         ("-" nil skk-auto-kutouten)
  ;;         ("p" nil skk-latin-mode)
  ;;         ("q" nil skk-toggle-kana)
  ;;         ("P" nil skk-jisx0208-latin-mode)
  ;;         ("Q" nil skk-set-henkan-point-subr)
  ;;         ("X" nil skk-purge-from-jisyo)
  ;;         ("/" nil skk-abbrev-mode)
  ;;         ("$" nil skk-display-code-for-char-at-point)
  ;;         ("@" nil skk-today)
  ;;         ("\\" nil skk-input-by-code-or-menu)))
  )

;; for whitespace
(use-package whitespace
  :init
  (progn
    (setq whitespace-style '(face
                             trailing
                             tabs
                             spaces
                             empty
                             space-mark
                             tab-mark
                             lines-tail))
    (setq whitespace-space-regexp "\\(\x3000+\\)")
    (setq whitespace-display-mappings
          '((space-mark ?\u3000 [?\u25a1])
            (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])))
    (global-whitespace-mode 1)

    (set-face-attribute 'whitespace-trailing nil
                        :background "tomato"
                        :underline t)
    (set-face-attribute 'whitespace-tab nil
                        :background "deep sky blue"
                        :underline t)
    (set-face-attribute 'whitespace-space nil
                        :background "green"
                        :weight 'bold)
    (set-face-attribute 'whitespace-empty nil
                        :background "#313131")
    (setq-default tab-width 4 indent-tabs-mode nil)

    ;; (setq whitespace-line-column 100) ;; limit line length
    (setq whitespace-line-column 70) ;; for Âü∑Á≠Ü
    (add-hook 'prog-mode-hook 'whitespace-mode)))

(use-package po-mode
  :config
  (bind-keys :map po-mode-map
             ("j" . po-msgid-to-msgstr)))

;; git gutter
(use-package git-gutter
  :config
  (progn
    (global-git-gutter-mode +1)
    ;; update-commands „Å´ e2wm „ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÖ•„Çå„Å¶„ÅÑ„Å™„ÅÑ„Å®Êõ¥Êñ∞„Åï„Çå„Å™„ÅÑÂïèÈ°å?
    (add-to-list 'git-gutter:update-commands 'e2wm:pst-history-forward-command)
    (add-to-list 'git-gutter:update-commands 'e2wm:pst-history-back-command)
    (set-face-foreground 'git-gutter:modified "black")
    (set-face-background 'git-gutter:modified "white")
    (set-face-foreground 'git-gutter:added "black")
    (set-face-background 'git-gutter:added "dark orange")
    (set-face-foreground 'git-gutter:deleted "black")
    (set-face-background 'git-gutter:deleted "blue")
    (custom-set-variables
     '(git-gutter:update-interval 1)
     '(git-gutter:window-width 2)
     '(git-gutter:modified-sign "‚ùÑ")
     '(git-gutter:added-sign "‚òÄ")
     '(git-gutter:deleted-sign "‚òÇ"))))

(prefer-coding-system 'utf-8)
(setq ruby-insert-encoding-magic-comment nil)
(set-file-name-coding-system 'utf-8)
(setq locale-coding-system 'utf-8-unix)

(use-package edit-server
  :config
  (edit-server-start))
